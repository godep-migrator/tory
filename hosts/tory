#!/usr/bin/env python
from __future__ import print_function

import argparse
import os
import sys

try:
    from urllib.request import urlopen
    import urllib.parse as urlparse
except ImportError:
    from urllib import urlopen
    import urlparse


def main(sysargs=sys.argv[:]):
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='log the constructed URL to stderr'
    )
    parser.add_argument(
        '--host',
        dest='hostname',
        help='only show the given host'
    )
    parser.add_argument(
        '--list',
        dest='list_only',
        action='store_true',
        help='only list the hosts, excluding hostvars'
    )
    parser.add_argument(
        '-s',
        '--tory-server',
        metavar='TORY_SERVER',
        help='full hostname and path to tory server',
        default=os.environ.get(
            'TORY_SERVER', 'http://localhost:9462/ansible/hosts'
        )
    )
    parser.add_argument(
        '-t',
        '--team',
        metavar='TEAM',
        help='filter hosts by the "team" tag',
        default=os.environ.get('TEAM')
    )
    parser.add_argument(
        '-e',
        '--env',
        metavar='NETWORK_ENV',
        help='filter hosts by the "env" tag',
        default=os.environ.get('NETWORK_ENV')
    )

    args = parser.parse_args(sysargs[1:])
    scheme, netloc, path, params, query, fragment = \
        urlparse.urlparse(args.tory_server)

    if not query:
        query = 'HERP=DERP'

    if args.hostname:
        path += ('/' + args.hostname)
        query += '&vars-only=1'

    if args.list_only:
        query += '&exclude-vars=1'

    if args.team:
        query += '&team={}'.format(args.team)

    if args.env:
        query += '&env={}'.format(args.env)

    url = urlparse.urlunparse(
        urlparse.ParseResult(scheme, netloc, path, params, query, fragment)
    )

    if args.debug:
        print('URL: {}'.format(url), file=sys.stderr)

    print(urlopen(url).read())
    return 0


if __name__ == '__main__':
    sys.exit(main())
